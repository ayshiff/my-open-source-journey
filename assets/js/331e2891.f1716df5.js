"use strict";(self.webpackChunkthe_open_source_with_remi=self.webpackChunkthe_open_source_with_remi||[]).push([[654,364],{8647:function(e,t,r){r.r(t),r.d(t,{Highlight:function(){return u},assets:function(){return c},contentTitle:function(){return l},default:function(){return h},frontMatter:function(){return s},metadata:function(){return d},toc:function(){return p}});var n=r(3117),a=(r(7294),r(3905)),o=r(4996),i=r(6395);const s={id:"driftctl458",title:"driftctl - Support for Terraform Cloud",sidebar_label:"11. driftctl - Support for Terraform Cloud"},l=void 0,d={unversionedId:"contributions/driftctl458",id:"contributions/driftctl458",title:"driftctl - Support for Terraform Cloud",description:"AWS",source:"@site/docs/contributions/driftctl#458.md",sourceDirName:"contributions",slug:"/contributions/driftctl458",permalink:"/docs/contributions/driftctl458",draft:!1,editUrl:"https://github.com/ayshiff/my-open-source-journey/docs/contributions/driftctl#458.md",tags:[],version:"current",frontMatter:{id:"driftctl458",title:"driftctl - Support for Terraform Cloud",sidebar_label:"11. driftctl - Support for Terraform Cloud"},sidebar:"docs",previous:{title:"10. Firefox for iOS - Bug fixing",permalink:"/docs/contributions/firefox-ios8327"},next:{title:"12. Backstage - Techdocs End-to-End testing",permalink:"/docs/contributions/backstage5675"}},c={},u=e=>{let{children:t,color:r}=e;return(0,a.kt)("span",{style:{backgroundColor:r,borderRadius:"2px",color:"#fff",padding:"0.2rem",fontWeight:600}},t)},p=[{value:"Introduction",id:"introduction",level:2},{value:"Project",id:"project",level:3},{value:"Context",id:"context",level:3},{value:"Current behavior",id:"current-behavior",level:3},{value:"Implement the solution",id:"implement-the-solution",level:3},{value:"Add the new IaC source",id:"add-the-new-iac-source",level:3},{value:"Add some tests",id:"add-some-tests",level:3},{value:"Final result",id:"final-result",level:2},{value:"Takeaway",id:"takeaway",level:2},{value:"Problems encountered",id:"problems-encountered",level:3},{value:"What did I learn ?",id:"what-did-i-learn-",level:3}],m={Highlight:u,toc:p};function h(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("div",{className:"pr_infos"},(0,a.kt)("div",{className:"marginBottom"},(0,a.kt)("div",null,(0,a.kt)(i.Merged,{date:"26 Apr 2021",mdxType:"Merged"})),(0,a.kt)("span",{className:"badge badge--secondary marginRight"},"AWS"),(0,a.kt)("span",{className:"badge badge--secondary marginRight"},"Terraform"),(0,a.kt)("span",{className:"badge badge--secondary marginRight"},"Infrastructure-drift"),(0,a.kt)("span",{className:"badge badge--secondary marginRight"},"Golang"))),(0,a.kt)("admonition",{title:"Contribution link",type:"info"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("a",{parentName:"p",href:"https://github.com/cloudskiff/driftctl/pull/458"},"https://github.com/cloudskiff/driftctl/pull/458"))),(0,a.kt)("admonition",{title:"Contribution Type",type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"This contribution is a new ",(0,a.kt)("strong",{parentName:"p"},"feature"),".")),(0,a.kt)("h2",{id:"introduction"},"Introduction"),(0,a.kt)("div",{className:"image-wrapper"},(0,a.kt)(i.ImageWrapper,{src:(0,o.Z)("img/driftctl/cover.jpg"),width:"100%",alt:"driftctl presentation",mdxType:"ImageWrapper"}),(0,a.kt)("em",null,"driftctl presentation")),(0,a.kt)("h3",{id:"project"},"Project"),(0,a.kt)("p",null,"You can find the ",(0,a.kt)("strong",{parentName:"p"},"driftctl project presentation")," ",(0,a.kt)("a",{href:"/docs/projects/driftctl"},(0,a.kt)(u,{color:"#203666",mdxType:"Highlight"},"here")),"."),(0,a.kt)("h3",{id:"context"},"Context"),(0,a.kt)("p",null,"In order to understand some parts of the contribution, you have to be familiar with ",(0,a.kt)("strong",{parentName:"p"},"Terraform Cloud"),"."),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"What is Terraform Cloud/Terraform Enterprise?")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Terraform Cloud")," is a managed service providing a consistent and reliable environment to manage Terraform runs."),(0,a.kt)("p",null,"Here is some screenshots of what the Terraform Cloud Dashboard looks like."),(0,a.kt)("br",null),(0,a.kt)("div",{className:"image-wrapper"},(0,a.kt)(i.ImageWrapper,{src:(0,o.Z)("img/driftctl/tfcloud2.jpg"),width:"100%",alt:"Terraform Cloud Dashboard",mdxType:"ImageWrapper"}),(0,a.kt)("em",null,"Terraform Cloud Dashboard")),(0,a.kt)("br",null),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"How Terraform Cloud Works?")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Write"),": Create new infrastructure or manage existing one that you\u2019ve already written using Terraform"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Compose"),": Use ",(0,a.kt)("a",{href:"https://www.terraform.io/docs/cloud/workspaces/"},(0,a.kt)(u,{color:"#203666",mdxType:"Highlight"},"Workspaces"))," to manage your environments"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Plan"),": Create an execution ",(0,a.kt)("a",{href:"https://www.terraform.io/docs/cli/commands/plan.html"},(0,a.kt)(u,{color:"#203666",mdxType:"Highlight"},"plan"))," "),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Provision & Manage"),": Use Terraform ",(0,a.kt)("a",{href:"https://www.terraform.io/docs/cloud/run/run-environment.html"},(0,a.kt)(u,{color:"#203666",mdxType:"Highlight"},"Cloud\u2019s run environment"))," as an execution platform"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Collaborate & Share"),": Use the ",(0,a.kt)("a",{href:"https://www.terraform.io/docs/cloud/registry/"},(0,a.kt)(u,{color:"#203666",mdxType:"Highlight"},"Private Module Registry"))," to provide ",(0,a.kt)("a",{href:"https://www.hashicorp.com/products/terraform/self-service-infrastructure"},(0,a.kt)(u,{color:"#203666",mdxType:"Highlight"},"Self-Service Infrastructure")))),(0,a.kt)("p",null,"Here is a schema showing the Terraform Cloud architecture."),(0,a.kt)("br",null),(0,a.kt)("div",{className:"image-wrapper"},(0,a.kt)(i.ImageWrapper,{src:"https://www.terraform.io/_next/static/images/why-tf-cloud-6813cc7ad5ea75683e614be235f071cc.png?fit=max&fm=webp&q=80&w=2500",width:"450px",alt:"Architecture Diagram",mdxType:"ImageWrapper"}),(0,a.kt)("em",null,"terraform.io/cloud")),(0,a.kt)("br",null),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Terraform Enterprise")," focuses more on large enterprises by providing a self-hosted distribution of Terraform Cloud."),(0,a.kt)("h3",{id:"current-behavior"},"Current behavior"),(0,a.kt)("p",null,"Currently, a user can retrieve the ",(0,a.kt)("inlineCode",{parentName:"p"},"terraform.tfstate")," file from the following places:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"tfstate://"),": Local"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"tfstate+s3://"),": AWS S3"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"tfstate+http://"),": HTTP Endpoint"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"tfstate+https://"),": HTTPS Endpoint")),(0,a.kt)("p",null,"The idea is to bring support for Terraform Cloud/Terraform Enterprise."),(0,a.kt)("admonition",{title:"Issue links",type:"note"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("a",{parentName:"p",href:"https://github.com/cloudskiff/driftctl/issues/434"},"https://github.com/cloudskiff/driftctl/issues/434"),"  ")),(0,a.kt)("h3",{id:"implement-the-solution"},"Implement the solution"),(0,a.kt)("p",null,"The logic is pretty straightforward as we can use the Terraform Cloud API to retrieve the ",(0,a.kt)("strong",{parentName:"p"},"current state")," for a given Workspace."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"GET /workspaces/:workspace_id/current-state-version\n")),(0,a.kt)("p",null,"Note that Terraform Cloud also retains ",(0,a.kt)("strong",{parentName:"p"},"historical state versions")," that we can retrieve using the following endpoint."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"GET /state-versions/:state_version_id\n")),(0,a.kt)("p",null,"Here is a sample request example to fetch the current state from the Workplace with the id ",(0,a.kt)("inlineCode",{parentName:"p"},"ws-6fHMCom98SDXSQUv"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'curl \\\n  --header "Authorization: Bearer $TOKEN" \\\n  --header "Content-Type: application/vnd.api+json" \\\n  https://app.terraform.io/api/v2/workspaces/ws-6fHMCom98SDXSQUv/current-state-version\n')),(0,a.kt)("p",null,"We will then receive a response with the following shape:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "id": "sv-SDboVZC8TCxXEneJ",\n    "type": "state-versions",\n    "attributes": {\n      "vcs-commit-sha": null,\n      "vcs-commit-url": null,\n      "created-at": "2018-08-27T14:49:47.902Z",\n      "hosted-state-download-url": "https://archivist.terraform.io/v1/object/...",\n      "serial": 3\n    },\n    "relationships": {\n      "run": {\n        "data": {\n          "type": "runs"\n        }\n      },\n      "created-by": {\n        "data": {\n          "id": "api-org-hashicorp",\n          "type": "users"\n        },\n        "links": {\n          "related": "/api/v2/runs/sv-SDboVZC8TCxXEneJ/created-by"\n        }\n      },\n      "outputs": {\n        "data": [\n          {\n            "id": "wsout-J2zM24JPFbfc7bE5",\n            "type": "state-version-outputs"\n          }\n        ]\n      }\n    },\n    "links": {\n      "self": "/api/v2/state-versions/sv-SDboVZC8TCxXEneJ"\n    }\n  }\n}\n')),(0,a.kt)("p",null,"The part we are interested in is the ",(0,a.kt)("inlineCode",{parentName:"p"},"hosted-state-download-url")," attribute which provides a url from which we can download the raw state ",(0,a.kt)("inlineCode",{parentName:"p"},"tfstate"),".",(0,a.kt)("br",{parentName:"p"}),"\n","We can then use this url with the ",(0,a.kt)("inlineCode",{parentName:"p"},"HTTPReader")," already present in driftctl which allows us to get a state from an https endpoint."),(0,a.kt)("p",null,"To summarize, here is the final workflow:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Fetch hosted-state-download-url from the API with the provided ",(0,a.kt)("inlineCode",{parentName:"li"},"WORKSPACE_ID")," (",(0,a.kt)("inlineCode",{parentName:"li"},"tfstate+tfcloud://WORKSPACE_ID"),") and the API token through the provided ",(0,a.kt)("inlineCode",{parentName:"li"},"tfc-token")," (",(0,a.kt)("inlineCode",{parentName:"li"},"--tfc-token TFC_TOKEN"),")"),(0,a.kt)("li",{parentName:"ol"},"Use ",(0,a.kt)("inlineCode",{parentName:"li"},"HTTPReader")," with the retrieved ",(0,a.kt)("inlineCode",{parentName:"li"},"hosted-state-download-url"))),(0,a.kt)("h3",{id:"add-the-new-iac-source"},"Add the new IaC source"),(0,a.kt)("p",null,"As said above, we will add a new IaC source to scan resources from the input Terraform statefile.",(0,a.kt)("br",{parentName:"p"}),"\n","This new flag will be : ",(0,a.kt)("inlineCode",{parentName:"p"},"tfstate+tfcloud://$WORKSPACE_ID")," with ",(0,a.kt)("inlineCode",{parentName:"p"},"$WORKSPACE_ID")," representing the ID for the workspace whose current state version we want to fetch."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"Define constants and Terraform Cloud types."))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="pkg/iac/terraform/state/backend/tfcloud_reader.go"',title:'"pkg/iac/terraform/state/backend/tfcloud_reader.go"'},'// Used in scan --from tfstate+tfcloud\nconst BackendKeyTFCloud = "tfcloud"\n// Terraform Cloud API base root\nconst TFCloudAPI = "https://app.terraform.io/api/v2"\n\ntype TFCloudAttributes struct {\n    HostedStateDownloadUrl string `json:"hosted-state-download-url"`\n}\n\ntype TFCloudData struct {\n    Attributes TFCloudAttributes `json:"attributes"`\n}\n// Body of the current-state-version response\ntype TFCloudBody struct {\n    Data TFCloudData `json:"data"`\n}\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"Define our TFCloudReader method."))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="pkg/iac/terraform/state/backend/tfcloud_reader.go"',title:'"pkg/iac/terraform/state/backend/tfcloud_reader.go"'},'/*\n  workspaceId: retrieved from "tfstate+tfcloud://workspaceId"\n  opts: contains our token within the TFCloudToken attribute\n*/\nfunc NewTFCloudReader(client pkghttp.HTTPClient, workspaceId string, opts *Options) (*HTTPBackend, error) {\n  // 1. Fetch the current-state-version from the TFCloud API\n    req, err := http.NewRequest(http.MethodGet, fmt.Sprintf("%s/workspaces/%s/current-state-version", TFCloudAPI, workspaceId), nil)\n\n    if err != nil {\n        return nil, err\n    }\n\n  // 2. Provide the right headers (with the token in Authorization)\n    req.Header.Add("Content-Type", "application/vnd.api+json")\n    req.Header.Add("Authorization", fmt.Sprintf("Bearer %s", opts.TFCloudToken))\n\n    client := &http.Client{}\n    res, err := client.Do(req)\n\n    if err != nil {\n    return nil, err\n    }\n\n  /* 3. Test that we have the correct response\n        - We can have 401 in case the provided authentication api_token is wrong\n        - We can have 404 in case the provided workspace_id is wrong\n  */\n    if res.StatusCode < 200 || res.StatusCode >= 400 {\n        return nil, errors.Errorf("error requesting terraform cloud backend state: status code: %d", res.StatusCode)\n    }\n\n    bodyBytes, _ := ioutil.ReadAll(res.Body)\n\n    body := TFCloudBody{}\n    err = json.Unmarshal(bodyBytes, &body)\n\n    if err != nil {\n        return nil, err\n    }\n\n  // 4. Retrieve the hosted-state-download-url from the body response\n    rawURL := body.Data.Attributes.HostedStateDownloadUrl\n    logrus.WithFields(logrus.Fields{"hosted-state-download-url": rawURL}).Trace("Terraform Cloud backend response")\n\n    opt := Options{}\n\n  // 5. Return a new HTTP reader with the hosted-state-download-url\n    return NewHTTPReader(&http.Client{}, rawURL, &opt)\n}\n')),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"NewTFCloudReader")," function above will be triggered when we'll use ",(0,a.kt)("inlineCode",{parentName:"p"},"tfstate+tfcloud"),"."),(0,a.kt)("p",null,"This logic is defined in the main state backend file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go",metastring:'{19,20,21,22} title="pkg/iac/terraform/state/backend/backend.go"',"{19,20,21,22}":!0,title:'"pkg/iac/terraform/state/backend/backend.go"'},'func GetBackend(config config.SupplierConfig, opts *Options) (Backend, error) {\n    backend := config.Backend\n    if !IsSupported(backend) {\n        return nil, errors.Errorf("Unsupported backend \'%s\'", backend)\n    }\n    switch backend {\n    // ""\n      case BackendKeyFile:\n        return NewFileReader(config.Path)\n    // "s3"\n      case BackendKeyS3:\n        return NewS3Reader(config.Path)\n    // "http"\n      case BackendKeyHTTP:\n        fallthrough\n    // "https"\n      case BackendKeyHTTPS:\n        return NewHTTPReader(&http.Client{}, fmt.Sprintf("%s://%s", config.Backend, config.Path), opts)\n    // "tfcloud"\n    // config.Path contains our workspace id and opts contains HTTP Headers and the API token\n      case BackendKeyTFCloud:\n        return NewTFCloudReader(&http.Client{}, config.Path, opts)\n      default:\n        return nil, errors.Errorf("Unsupported backend \'%s\'", backend)\n    }\n')),(0,a.kt)("h3",{id:"add-some-tests"},"Add some tests"),(0,a.kt)("p",null,"To check that our code covers the different cases correctly, we will write three tests:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Success to fetch URL with auth header"),(0,a.kt)("li",{parentName:"ul"},"Fail with ",(0,a.kt)("strong",{parentName:"li"},"wrong workspaceId")),(0,a.kt)("li",{parentName:"ul"},"Fail with ",(0,a.kt)("strong",{parentName:"li"},"bad authentication token"))),(0,a.kt)("p",null,"We will define an array of tests in which we will iterate."),(0,a.kt)("p",null,"Here is the example of the ",(0,a.kt)("strong",{parentName:"p"},"success test case")," when we manage to recover the state correctly."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="pkg/iac/terraform/state/backend/tfcloud_reader_test.go"',title:'"pkg/iac/terraform/state/backend/tfcloud_reader_test.go"'},'{\n  // Name of the current test\n    name: "Should fetch URL with auth header",\n  // Refers to the NewTFCloudReader arguments\n    args: args{\n        workspaceId: "workspaceId",\n        options: &Options{\n            TFCloudToken: "TOKEN",\n        },\n    },\n    url:     "https://app.terraform.io/api/v2/workspaces/workspaceId/current-state-version",\n  // Refers to the hosted-state-download-url result\n    wantURL: "https://archivist.terraform.io/v1/object/test",\n    wantErr: nil,\n  // Mock the the different http calls\n    mock: func() {\n        httpmock.Reset()\n    // Mock the Terraform Cloud API call\n        httpmock.RegisterResponder(\n            "GET",\n            "https://app.terraform.io/api/v2/workspaces/workspaceId/current-state-version",\n            httpmock.NewBytesResponder(\n        http.StatusOK,\n        []byte(`\n        {\n          "data":{\n             "attributes":{\n                "hosted-state-download-url":"https:archivist.terraform.io/v1/object/test"\n             }\n          }\n        }`)\n      ),\n        )\n    // Mock the state response from the hosted-state-download-url request\n        httpmock.RegisterResponder(\n            "GET",\n            "https://archivist.terraform.io/v1/object/test",\n            httpmock.NewBytesResponder(http.StatusOK, []byte(`{}`)),\n        )\n    },\n},\n')),(0,a.kt)("p",null,"Here is the main loop in which we check that each test matches what we expected."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="pkg/iac/terraform/state/backend/tfcloud_reader_test.go"',title:'"pkg/iac/terraform/state/backend/tfcloud_reader_test.go"'},"for _, tt := range tests {\n    t.Run(tt.name, func(t *testing.T) {\n    // Mock the following HTTP calls\n        tt.mock()\n    // Call the reader with the args\n        got, err := NewTFCloudReader(&http.Client{}, tt.args.workspaceId, tt.args.options)\n    // Check if we wanted an error\n        if tt.wantErr != nil {\n      // Check the expected error with the actual one and return\n            assert.EqualError(t, err, tt.wantErr.Error())\n            return\n        } else {\n            assert.NoError(t, err)\n        }\n        assert.NotNil(t, got)\n    // Check the expected url with the actual one\n        assert.Equal(t, tt.wantURL, got.request.URL.String())\n    })\n}\n")),(0,a.kt)("h2",{id:"final-result"},"Final result"),(0,a.kt)("p",null,"Retrieve your ",(0,a.kt)("strong",{parentName:"p"},"workspace ID")," and ",(0,a.kt)("strong",{parentName:"p"},"API token")," from your Terraform Cloud account."),(0,a.kt)("div",{className:"image-wrapper"},(0,a.kt)(i.ImageWrapper,{src:(0,o.Z)("img/driftctl/credentials.jpg"),width:"100%",alt:"Terraform Cloud Credentials",mdxType:"ImageWrapper"}),(0,a.kt)("em",null,"Terraform Cloud Credentials")),(0,a.kt)("br",null),(0,a.kt)("p",null,"We can now scan our resource with the command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"driftctl scan --from tfstate+tfcloud://$WORKSPACE_ID --tfc-token $API_TOKEN\n")),(0,a.kt)("p",null,"Which in my case gives the following output telling me that 9 resources are not covered by IaC."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"Scanned resources:    (20)\nFound resources not covered by IaC:\n  aws_iam_policy_attachment:\n    - role_test-arn:aws:iam::559417107340:policy/ConsoleMe\n  aws_iam_role:\n    - role_test\n  aws_iam_access_key:\n    - ******************** (User: test2)\n    - ******************** (User: admin)\n  aws_iam_policy:\n    - arn:aws:iam::559417107340:policy/ConsoleMe\n    - arn:aws:iam::559417107340:policy/test_policy_2\n    - arn:aws:iam::559417107340:policy/test_policy\n  aws_iam_user:\n    - admin\n    - test2\nFound 9 resource(s)\n - 0% coverage\n - 0 covered by IaC\n - 9 not covered by IaC\n - 0 missing on cloud provider\n - 0/0 changed outside of IaC\n")),(0,a.kt)("p",null,"You can try the tool yourself by following the ",(0,a.kt)("a",{href:"https://docs.driftctl.com/"},(0,a.kt)(u,{color:"#203666",mdxType:"Highlight"},"driftctl official documentation")),"."),(0,a.kt)("h2",{id:"takeaway"},"Takeaway"),(0,a.kt)("h3",{id:"problems-encountered"},"Problems encountered"),(0,a.kt)("p",null,"The majority of the problems I encountered were related to Golang. It's not a language I am familiar with so I often had to go back and forth between my IDE and the docs."),(0,a.kt)("h3",{id:"what-did-i-learn-"},"What did I learn ?"),(0,a.kt)("p",null,"This was my first contribution in ",(0,a.kt)("strong",{parentName:"p"},"Golang")," and also the first one using ",(0,a.kt)("strong",{parentName:"p"},"Terraform Cloud"),"."))}h.isMDXComponent=!0},6395:function(e,t,r){r.r(t),r.d(t,{ImageWrapper:function(){return m},Merged:function(){return p},Open:function(){return h},Status:function(){return k},assets:function(){return c},contentTitle:function(){return l},default:function(){return g},frontMatter:function(){return s},metadata:function(){return d},toc:function(){return u}});var n=r(3117),a=r(7294),o=r(3905),i=r(2879);const s={},l=void 0,d={unversionedId:"utils",id:"utils",title:"utils",description:"",source:"@site/docs/utils.md",sourceDirName:".",slug:"/utils",permalink:"/docs/utils",draft:!1,editUrl:"https://github.com/ayshiff/my-open-source-journey/docs/utils.md",tags:[],version:"current",frontMatter:{}},c={},u=[],p=e=>{let{date:t}=e;return(0,o.kt)("div",null,(0,o.kt)("div",{className:"merged"},(0,o.kt)("span",null,(0,o.kt)("svg",{height:"16",viewBox:"0 0 16 16",version:"1.1",width:"16",fill:"white","aria-hidden":"true",className:"status_svg"},(0,o.kt)("path",{fillRule:"evenodd",d:"M5 3.254V3.25v.005a.75.75 0 110-.005v.004zm.45 1.9a2.25 2.25 0 10-1.95.218v5.256a2.25 2.25 0 101.5 0V7.123A5.735 5.735 0 009.25 9h1.378a2.251 2.251 0 100-1.5H9.25a4.25 4.25 0 01-3.8-2.346zM12.75 9a.75.75 0 100-1.5.75.75 0 000 1.5zm-8.5 4.5a.75.75 0 100-1.5.75.75 0 000 1.5z"})),"Merged")),t||null)},m=e=>{let{src:t,alt:r,width:n}=e;const[s,l]=a.useState(!1);return(0,o.kt)("div",null,(0,o.kt)("div",{className:"image-zoom",onClick:()=>l(!0)},(0,o.kt)("img",{src:t,alt:r,width:n})),s&&(0,o.kt)(i.Z,{mainSrc:t,onCloseRequest:()=>l(!1),mdxType:"Lightbox"}))},h=e=>{let{date:t}=e;return(0,o.kt)("div",null,(0,o.kt)("div",{className:"open"},(0,o.kt)("span",null,(0,o.kt)("svg",{height:"16",viewBox:"0 0 16 16",version:"1.1",width:"16",fill:"white","aria-hidden":"true",className:"status_svg"},(0,o.kt)("path",{fillRule:"evenodd",d:"M7.177 3.073L9.573.677A.25.25 0 0110 .854v4.792a.25.25 0 01-.427.177L7.177 3.427a.25.25 0 010-.354zM3.75 2.5a.75.75 0 100 1.5.75.75 0 000-1.5zm-2.25.75a2.25 2.25 0 113 2.122v5.256a2.251 2.251 0 11-1.5 0V5.372A2.25 2.25 0 011.5 3.25zM11 2.5h-1V4h1a1 1 0 011 1v5.628a2.251 2.251 0 101.5 0V5A2.5 2.5 0 0011 2.5zm1 10.25a.75.75 0 111.5 0 .75.75 0 01-1.5 0zM3.75 12a.75.75 0 100 1.5.75.75 0 000-1.5z"})),"Open")),t||null)},k=e=>{let{url:t}=e;const[r,n]=a.useState(null);return a.useEffect((()=>{let e=!0;return fetch(t).then((e=>e.json())).then((t=>{e&&n(t.merged)})),()=>{e=!1}}),[]),null===r?(0,o.kt)("div",null):!0===r?(0,o.kt)(p,{mdxType:"Merged"}):(0,o.kt)(h,{mdxType:"Open"})},f={toc:u,Merged:p,ImageWrapper:m,Open:h,Status:k};function g(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},f,r,{components:t,mdxType:"MDXLayout"}))}g.isMDXComponent=!0}}]);