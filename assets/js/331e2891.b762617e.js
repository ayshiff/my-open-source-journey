"use strict";(self.webpackChunkthe_open_source_with_remi=self.webpackChunkthe_open_source_with_remi||[]).push([[654,364],{3919:function(e,t,n){function r(e){return!0===/^(\w*:|\/\/)/.test(e)}function a(e){return void 0!==e&&!r(e)}n.d(t,{b:function(){return r},Z:function(){return a}})},4996:function(e,t,n){n.d(t,{C:function(){return o},Z:function(){return i}});var r=n(2263),a=n(3919);function o(){var e=(0,r.Z)().siteConfig,t=(e=void 0===e?{}:e).baseUrl,n=void 0===t?"/":t,o=e.url;return{withBaseUrl:function(e,t){return function(e,t,n,r){var o=void 0===r?{}:r,i=o.forcePrependBaseUrl,s=void 0!==i&&i,l=o.absolute,d=void 0!==l&&l;if(!n)return n;if(n.startsWith("#"))return n;if((0,a.b)(n))return n;if(s)return t+n;var c=n.startsWith(t)?n:t+n.replace(/^\//,"");return d?e+c:c}(o,n,e,t)}}}function i(e,t){return void 0===t&&(t={}),(0,o().withBaseUrl)(e,t)}},8647:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return d},contentTitle:function(){return c},metadata:function(){return u},Highlight:function(){return p},toc:function(){return m},default:function(){return f}});var r=n(3117),a=n(102),o=(n(7294),n(3905)),i=n(4996),s=n(6395),l=["components"],d={id:"driftctl458",title:"driftctl - Support for Terraform Cloud",sidebar_label:"11. driftctl - Support for Terraform Cloud"},c=void 0,u={unversionedId:"contributions/driftctl458",id:"contributions/driftctl458",isDocsHomePage:!1,title:"driftctl - Support for Terraform Cloud",description:"backgroundColor: color,",source:"@site/docs/contributions/driftctl#458.md",sourceDirName:"contributions",slug:"/contributions/driftctl458",permalink:"/docs/contributions/driftctl458",editUrl:"https://github.com/ayshiff/my-open-source-journey/docs/contributions/driftctl#458.md",tags:[],version:"current",frontMatter:{id:"driftctl458",title:"driftctl - Support for Terraform Cloud",sidebar_label:"11. driftctl - Support for Terraform Cloud"},sidebar:"docs",previous:{title:"10. Firefox for iOS - Bug fixing",permalink:"/docs/contributions/firefox-ios8327"},next:{title:"12. Backstage - Techdocs End-to-End testing",permalink:"/docs/contributions/backstage5675"}},p=function(e){var t=e.children,n=e.color;return(0,o.kt)("span",{style:{backgroundColor:n,borderRadius:"2px",color:"#fff",padding:"0.2rem",fontWeight:600}},t)},m=[{value:"Introduction",id:"introduction",children:[{value:"Project",id:"project",children:[],level:3},{value:"Context",id:"context",children:[],level:3},{value:"Current behavior",id:"current-behavior",children:[],level:3},{value:"Implement the solution",id:"implement-the-solution",children:[],level:3},{value:"Add the new IaC source",id:"add-the-new-iac-source",children:[],level:3},{value:"Add some tests",id:"add-some-tests",children:[],level:3}],level:2},{value:"Final result",id:"final-result",children:[],level:2},{value:"Takeaway",id:"takeaway",children:[{value:"Problems encountered",id:"problems-encountered",children:[],level:3},{value:"What did I learn ?",id:"what-did-i-learn-",children:[],level:3}],level:2}],h={Highlight:p,toc:m};function f(e){var t=e.components,n=(0,a.Z)(e,l);return(0,o.kt)("wrapper",(0,r.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("div",{className:"pr_infos"},(0,o.kt)("div",{className:"marginBottom"},(0,o.kt)("div",null,(0,o.kt)(s.Merged,{date:"26 Apr 2021",mdxType:"Merged"})),(0,o.kt)("span",{className:"badge badge--secondary marginRight"},"AWS"),(0,o.kt)("span",{className:"badge badge--secondary marginRight"},"Terraform"),(0,o.kt)("span",{className:"badge badge--secondary marginRight"},"Infrastructure-drift"),(0,o.kt)("span",{className:"badge badge--secondary marginRight"},"Golang"))),(0,o.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"Contribution link")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},(0,o.kt)("a",{parentName:"p",href:"https://github.com/cloudskiff/driftctl/pull/458"},"https://github.com/cloudskiff/driftctl/pull/458")))),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Contribution Type")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"This contribution is a new ",(0,o.kt)("strong",{parentName:"p"},"feature"),"."))),(0,o.kt)("h2",{id:"introduction"},"Introduction"),(0,o.kt)("div",{className:"image-wrapper"},(0,o.kt)(s.ImageWrapper,{src:(0,i.Z)("img/driftctl/cover.jpg"),width:"100%",alt:"driftctl presentation",mdxType:"ImageWrapper"}),(0,o.kt)("em",null,"driftctl presentation")),(0,o.kt)("h3",{id:"project"},"Project"),(0,o.kt)("p",null,"You can find the ",(0,o.kt)("strong",{parentName:"p"},"driftctl project presentation")," ",(0,o.kt)("a",{href:"/docs/projects/driftctl"},(0,o.kt)(p,{color:"#203666",mdxType:"Highlight"},"here")),"."),(0,o.kt)("h3",{id:"context"},"Context"),(0,o.kt)("p",null,"In order to understand some parts of the contribution, you have to be familiar with ",(0,o.kt)("strong",{parentName:"p"},"Terraform Cloud"),"."),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"What is Terraform Cloud/Terraform Enterprise?")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Terraform Cloud")," is a managed service providing a consistent and reliable environment to manage Terraform runs."),(0,o.kt)("p",null,"Here is some screenshots of what the Terraform Cloud Dashboard looks like."),(0,o.kt)("br",null),(0,o.kt)("div",{className:"image-wrapper"},(0,o.kt)(s.ImageWrapper,{src:(0,i.Z)("img/driftctl/tfcloud2.jpg"),width:"100%",alt:"Terraform Cloud Dashboard",mdxType:"ImageWrapper"}),(0,o.kt)("em",null,"Terraform Cloud Dashboard")),(0,o.kt)("br",null),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"How Terraform Cloud Works?")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Write"),": Create new infrastructure or manage existing one that you\u2019ve already written using Terraform"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Compose"),": Use ",(0,o.kt)("a",{href:"https://www.terraform.io/docs/cloud/workspaces/"},(0,o.kt)(p,{color:"#203666",mdxType:"Highlight"},"Workspaces"))," to manage your environments"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Plan"),": Create an execution ",(0,o.kt)("a",{href:"https://www.terraform.io/docs/cli/commands/plan.html"},(0,o.kt)(p,{color:"#203666",mdxType:"Highlight"},"plan"))," "),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Provision & Manage"),": Use Terraform ",(0,o.kt)("a",{href:"https://www.terraform.io/docs/cloud/run/run-environment.html"},(0,o.kt)(p,{color:"#203666",mdxType:"Highlight"},"Cloud\u2019s run environment"))," as an execution platform"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Collaborate & Share"),": Use the ",(0,o.kt)("a",{href:"https://www.terraform.io/docs/cloud/registry/"},(0,o.kt)(p,{color:"#203666",mdxType:"Highlight"},"Private Module Registry"))," to provide ",(0,o.kt)("a",{href:"https://www.hashicorp.com/products/terraform/self-service-infrastructure"},(0,o.kt)(p,{color:"#203666",mdxType:"Highlight"},"Self-Service Infrastructure")))),(0,o.kt)("p",null,"Here is a schema showing the Terraform Cloud architecture."),(0,o.kt)("br",null),(0,o.kt)("div",{className:"image-wrapper"},(0,o.kt)(s.ImageWrapper,{src:"https://www.terraform.io/_next/static/images/why-tf-cloud-6813cc7ad5ea75683e614be235f071cc.png?fit=max&fm=webp&q=80&w=2500",width:"450px",alt:"Architecture Diagram",mdxType:"ImageWrapper"}),(0,o.kt)("em",null,"terraform.io/cloud")),(0,o.kt)("br",null),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Terraform Enterprise")," focuses more on large enterprises by providing a self-hosted distribution of Terraform Cloud."),(0,o.kt)("h3",{id:"current-behavior"},"Current behavior"),(0,o.kt)("p",null,"Currently, a user can retrieve the ",(0,o.kt)("inlineCode",{parentName:"p"},"terraform.tfstate")," file from the following places:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"tfstate://"),": Local"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"tfstate+s3://"),": AWS S3"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"tfstate+http://"),": HTTP Endpoint"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"tfstate+https://"),": HTTPS Endpoint")),(0,o.kt)("p",null,"The idea is to bring support for Terraform Cloud/Terraform Enterprise."),(0,o.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"Issue links")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},(0,o.kt)("a",{parentName:"p",href:"https://github.com/cloudskiff/driftctl/issues/434"},"https://github.com/cloudskiff/driftctl/issues/434"),"  "))),(0,o.kt)("h3",{id:"implement-the-solution"},"Implement the solution"),(0,o.kt)("p",null,"The logic is pretty straightforward as we can use the Terraform Cloud API to retrieve the ",(0,o.kt)("strong",{parentName:"p"},"current state")," for a given Workspace."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"GET /workspaces/:workspace_id/current-state-version\n")),(0,o.kt)("p",null,"Note that Terraform Cloud also retains ",(0,o.kt)("strong",{parentName:"p"},"historical state versions")," that we can retrieve using the following endpoint."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"GET /state-versions/:state_version_id\n")),(0,o.kt)("p",null,"Here is a sample request example to fetch the current state from the Workplace with the id ",(0,o.kt)("inlineCode",{parentName:"p"},"ws-6fHMCom98SDXSQUv"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'curl \\\n  --header "Authorization: Bearer $TOKEN" \\\n  --header "Content-Type: application/vnd.api+json" \\\n  https://app.terraform.io/api/v2/workspaces/ws-6fHMCom98SDXSQUv/current-state-version\n')),(0,o.kt)("p",null,"We will then receive a response with the following shape:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "id": "sv-SDboVZC8TCxXEneJ",\n    "type": "state-versions",\n    "attributes": {\n      "vcs-commit-sha": null,\n      "vcs-commit-url": null,\n      "created-at": "2018-08-27T14:49:47.902Z",\n      "hosted-state-download-url": "https://archivist.terraform.io/v1/object/...",\n      "serial": 3\n    },\n    "relationships": {\n      "run": {\n        "data": {\n          "type": "runs"\n        }\n      },\n      "created-by": {\n        "data": {\n          "id": "api-org-hashicorp",\n          "type": "users"\n        },\n        "links": {\n          "related": "/api/v2/runs/sv-SDboVZC8TCxXEneJ/created-by"\n        }\n      },\n      "outputs": {\n        "data": [\n          {\n            "id": "wsout-J2zM24JPFbfc7bE5",\n            "type": "state-version-outputs"\n          }\n        ]\n      }\n    },\n    "links": {\n      "self": "/api/v2/state-versions/sv-SDboVZC8TCxXEneJ"\n    }\n  }\n}\n')),(0,o.kt)("p",null,"The part we are interested in is the ",(0,o.kt)("inlineCode",{parentName:"p"},"hosted-state-download-url")," attribute which provides a url from which we can download the raw state ",(0,o.kt)("inlineCode",{parentName:"p"},"tfstate"),".",(0,o.kt)("br",{parentName:"p"}),"\n","We can then use this url with the ",(0,o.kt)("inlineCode",{parentName:"p"},"HTTPReader")," already present in driftctl which allows us to get a state from an https endpoint."),(0,o.kt)("p",null,"To summarize, here is the final workflow:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Fetch hosted-state-download-url from the API with the provided ",(0,o.kt)("inlineCode",{parentName:"li"},"WORKSPACE_ID")," (",(0,o.kt)("inlineCode",{parentName:"li"},"tfstate+tfcloud://WORKSPACE_ID"),") and the API token through the provided ",(0,o.kt)("inlineCode",{parentName:"li"},"tfc-token")," (",(0,o.kt)("inlineCode",{parentName:"li"},"--tfc-token TFC_TOKEN"),")"),(0,o.kt)("li",{parentName:"ol"},"Use ",(0,o.kt)("inlineCode",{parentName:"li"},"HTTPReader")," with the retrieved ",(0,o.kt)("inlineCode",{parentName:"li"},"hosted-state-download-url"))),(0,o.kt)("h3",{id:"add-the-new-iac-source"},"Add the new IaC source"),(0,o.kt)("p",null,"As said above, we will add a new IaC source to scan resources from the input Terraform statefile.",(0,o.kt)("br",{parentName:"p"}),"\n","This new flag will be : ",(0,o.kt)("inlineCode",{parentName:"p"},"tfstate+tfcloud://$WORKSPACE_ID")," with ",(0,o.kt)("inlineCode",{parentName:"p"},"$WORKSPACE_ID")," representing the ID for the workspace whose current state version we want to fetch."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"Define constants and Terraform Cloud types."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="pkg/iac/terraform/state/backend/tfcloud_reader.go"',title:'"pkg/iac/terraform/state/backend/tfcloud_reader.go"'},'// Used in scan --from tfstate+tfcloud\nconst BackendKeyTFCloud = "tfcloud"\n// Terraform Cloud API base root\nconst TFCloudAPI = "https://app.terraform.io/api/v2"\n\ntype TFCloudAttributes struct {\n    HostedStateDownloadUrl string `json:"hosted-state-download-url"`\n}\n\ntype TFCloudData struct {\n    Attributes TFCloudAttributes `json:"attributes"`\n}\n// Body of the current-state-version response\ntype TFCloudBody struct {\n    Data TFCloudData `json:"data"`\n}\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"Define our TFCloudReader method."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="pkg/iac/terraform/state/backend/tfcloud_reader.go"',title:'"pkg/iac/terraform/state/backend/tfcloud_reader.go"'},'/*\n  workspaceId: retrieved from "tfstate+tfcloud://workspaceId"\n  opts: contains our token within the TFCloudToken attribute\n*/\nfunc NewTFCloudReader(client pkghttp.HTTPClient, workspaceId string, opts *Options) (*HTTPBackend, error) {\n  // 1. Fetch the current-state-version from the TFCloud API\n    req, err := http.NewRequest(http.MethodGet, fmt.Sprintf("%s/workspaces/%s/current-state-version", TFCloudAPI, workspaceId), nil)\n\n    if err != nil {\n        return nil, err\n    }\n\n  // 2. Provide the right headers (with the token in Authorization)\n    req.Header.Add("Content-Type", "application/vnd.api+json")\n    req.Header.Add("Authorization", fmt.Sprintf("Bearer %s", opts.TFCloudToken))\n\n    client := &http.Client{}\n    res, err := client.Do(req)\n\n    if err != nil {\n    return nil, err\n    }\n\n  /* 3. Test that we have the correct response\n        - We can have 401 in case the provided authentication api_token is wrong\n        - We can have 404 in case the provided workspace_id is wrong\n  */\n    if res.StatusCode < 200 || res.StatusCode >= 400 {\n        return nil, errors.Errorf("error requesting terraform cloud backend state: status code: %d", res.StatusCode)\n    }\n\n    bodyBytes, _ := ioutil.ReadAll(res.Body)\n\n    body := TFCloudBody{}\n    err = json.Unmarshal(bodyBytes, &body)\n\n    if err != nil {\n        return nil, err\n    }\n\n  // 4. Retrieve the hosted-state-download-url from the body response\n    rawURL := body.Data.Attributes.HostedStateDownloadUrl\n    logrus.WithFields(logrus.Fields{"hosted-state-download-url": rawURL}).Trace("Terraform Cloud backend response")\n\n    opt := Options{}\n\n  // 5. Return a new HTTP reader with the hosted-state-download-url\n    return NewHTTPReader(&http.Client{}, rawURL, &opt)\n}\n')),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"NewTFCloudReader")," function above will be triggered when we'll use ",(0,o.kt)("inlineCode",{parentName:"p"},"tfstate+tfcloud"),"."),(0,o.kt)("p",null,"This logic is defined in the main state backend file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go",metastring:'{19,20,21,22} title="pkg/iac/terraform/state/backend/backend.go"',"{19,20,21,22}":!0,title:'"pkg/iac/terraform/state/backend/backend.go"'},'func GetBackend(config config.SupplierConfig, opts *Options) (Backend, error) {\n    backend := config.Backend\n    if !IsSupported(backend) {\n        return nil, errors.Errorf("Unsupported backend \'%s\'", backend)\n    }\n    switch backend {\n    // ""\n      case BackendKeyFile:\n        return NewFileReader(config.Path)\n    // "s3"\n      case BackendKeyS3:\n        return NewS3Reader(config.Path)\n    // "http"\n      case BackendKeyHTTP:\n        fallthrough\n    // "https"\n      case BackendKeyHTTPS:\n        return NewHTTPReader(&http.Client{}, fmt.Sprintf("%s://%s", config.Backend, config.Path), opts)\n    // "tfcloud"\n    // config.Path contains our workspace id and opts contains HTTP Headers and the API token\n      case BackendKeyTFCloud:\n        return NewTFCloudReader(&http.Client{}, config.Path, opts)\n      default:\n        return nil, errors.Errorf("Unsupported backend \'%s\'", backend)\n    }\n')),(0,o.kt)("h3",{id:"add-some-tests"},"Add some tests"),(0,o.kt)("p",null,"To check that our code covers the different cases correctly, we will write three tests:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Success to fetch URL with auth header"),(0,o.kt)("li",{parentName:"ul"},"Fail with ",(0,o.kt)("strong",{parentName:"li"},"wrong workspaceId")),(0,o.kt)("li",{parentName:"ul"},"Fail with ",(0,o.kt)("strong",{parentName:"li"},"bad authentication token"))),(0,o.kt)("p",null,"We will define an array of tests in which we will iterate."),(0,o.kt)("p",null,"Here is the example of the ",(0,o.kt)("strong",{parentName:"p"},"success test case")," when we manage to recover the state correctly."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="pkg/iac/terraform/state/backend/tfcloud_reader_test.go"',title:'"pkg/iac/terraform/state/backend/tfcloud_reader_test.go"'},'{\n  // Name of the current test\n    name: "Should fetch URL with auth header",\n  // Refers to the NewTFCloudReader arguments\n    args: args{\n        workspaceId: "workspaceId",\n        options: &Options{\n            TFCloudToken: "TOKEN",\n        },\n    },\n    url:     "https://app.terraform.io/api/v2/workspaces/workspaceId/current-state-version",\n  // Refers to the hosted-state-download-url result\n    wantURL: "https://archivist.terraform.io/v1/object/test",\n    wantErr: nil,\n  // Mock the the different http calls\n    mock: func() {\n        httpmock.Reset()\n    // Mock the Terraform Cloud API call\n        httpmock.RegisterResponder(\n            "GET",\n            "https://app.terraform.io/api/v2/workspaces/workspaceId/current-state-version",\n            httpmock.NewBytesResponder(\n        http.StatusOK,\n        []byte(`\n        {\n          "data":{\n             "attributes":{\n                "hosted-state-download-url":"https:archivist.terraform.io/v1/object/test"\n             }\n          }\n        }`)\n      ),\n        )\n    // Mock the state response from the hosted-state-download-url request\n        httpmock.RegisterResponder(\n            "GET",\n            "https://archivist.terraform.io/v1/object/test",\n            httpmock.NewBytesResponder(http.StatusOK, []byte(`{}`)),\n        )\n    },\n},\n')),(0,o.kt)("p",null,"Here is the main loop in which we check that each test matches what we expected."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="pkg/iac/terraform/state/backend/tfcloud_reader_test.go"',title:'"pkg/iac/terraform/state/backend/tfcloud_reader_test.go"'},"for _, tt := range tests {\n    t.Run(tt.name, func(t *testing.T) {\n    // Mock the following HTTP calls\n        tt.mock()\n    // Call the reader with the args\n        got, err := NewTFCloudReader(&http.Client{}, tt.args.workspaceId, tt.args.options)\n    // Check if we wanted an error\n        if tt.wantErr != nil {\n      // Check the expected error with the actual one and return\n            assert.EqualError(t, err, tt.wantErr.Error())\n            return\n        } else {\n            assert.NoError(t, err)\n        }\n        assert.NotNil(t, got)\n    // Check the expected url with the actual one\n        assert.Equal(t, tt.wantURL, got.request.URL.String())\n    })\n}\n")),(0,o.kt)("h2",{id:"final-result"},"Final result"),(0,o.kt)("p",null,"Retrieve your ",(0,o.kt)("strong",{parentName:"p"},"workspace ID")," and ",(0,o.kt)("strong",{parentName:"p"},"API token")," from your Terraform Cloud account."),(0,o.kt)("div",{className:"image-wrapper"},(0,o.kt)(s.ImageWrapper,{src:(0,i.Z)("img/driftctl/credentials.jpg"),width:"100%",alt:"Terraform Cloud Credentials",mdxType:"ImageWrapper"}),(0,o.kt)("em",null,"Terraform Cloud Credentials")),(0,o.kt)("br",null),(0,o.kt)("p",null,"We can now scan our resource with the command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"driftctl scan --from tfstate+tfcloud://$WORKSPACE_ID --tfc-token $API_TOKEN\n")),(0,o.kt)("p",null,"Which in my case gives the following output telling me that 9 resources are not covered by IaC."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"Scanned resources:    (20)\nFound resources not covered by IaC:\n  aws_iam_policy_attachment:\n    - role_test-arn:aws:iam::559417107340:policy/ConsoleMe\n  aws_iam_role:\n    - role_test\n  aws_iam_access_key:\n    - ******************** (User: test2)\n    - ******************** (User: admin)\n  aws_iam_policy:\n    - arn:aws:iam::559417107340:policy/ConsoleMe\n    - arn:aws:iam::559417107340:policy/test_policy_2\n    - arn:aws:iam::559417107340:policy/test_policy\n  aws_iam_user:\n    - admin\n    - test2\nFound 9 resource(s)\n - 0% coverage\n - 0 covered by IaC\n - 9 not covered by IaC\n - 0 missing on cloud provider\n - 0/0 changed outside of IaC\n")),(0,o.kt)("p",null,"You can try the tool yourself by following the ",(0,o.kt)("a",{href:"https://docs.driftctl.com/"},(0,o.kt)(p,{color:"#203666",mdxType:"Highlight"},"driftctl official documentation")),"."),(0,o.kt)("h2",{id:"takeaway"},"Takeaway"),(0,o.kt)("h3",{id:"problems-encountered"},"Problems encountered"),(0,o.kt)("p",null,"The majority of the problems I encountered were related to Golang. It's not a language I am familiar with so I often had to go back and forth between my IDE and the docs."),(0,o.kt)("h3",{id:"what-did-i-learn-"},"What did I learn ?"),(0,o.kt)("p",null,"This was my first contribution in ",(0,o.kt)("strong",{parentName:"p"},"Golang")," and also the first one using ",(0,o.kt)("strong",{parentName:"p"},"Terraform Cloud"),"."))}f.isMDXComponent=!0},6395:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return d},contentTitle:function(){return c},metadata:function(){return u},toc:function(){return p},Merged:function(){return m},ImageWrapper:function(){return h},Open:function(){return f},Status:function(){return k},default:function(){return w}});var r=n(3117),a=n(102),o=n(7294),i=n(3905),s=n(2879),l=["components"],d={},c=void 0,u={unversionedId:"utils",id:"utils",isDocsHomePage:!1,title:"utils",description:"<svg",source:"@site/docs/utils.md",sourceDirName:".",slug:"/utils",permalink:"/docs/utils",editUrl:"https://github.com/ayshiff/my-open-source-journey/docs/utils.md",tags:[],version:"current",frontMatter:{}},p=[],m=function(e){var t=e.date;return(0,i.kt)("div",null,(0,i.kt)("div",{className:"merged"},(0,i.kt)("span",null,(0,i.kt)("svg",{height:"16",viewBox:"0 0 16 16",version:"1.1",width:"16",fill:"white","aria-hidden":"true",className:"status_svg"},(0,i.kt)("path",{fillRule:"evenodd",d:"M5 3.254V3.25v.005a.75.75 0 110-.005v.004zm.45 1.9a2.25 2.25 0 10-1.95.218v5.256a2.25 2.25 0 101.5 0V7.123A5.735 5.735 0 009.25 9h1.378a2.251 2.251 0 100-1.5H9.25a4.25 4.25 0 01-3.8-2.346zM12.75 9a.75.75 0 100-1.5.75.75 0 000 1.5zm-8.5 4.5a.75.75 0 100-1.5.75.75 0 000 1.5z"})),"Merged")),t||null)},h=function(e){var t=e.src,n=e.alt,r=e.width,a=o.useState(!1),l=a[0],d=a[1];return(0,i.kt)("div",null,(0,i.kt)("div",{className:"image-zoom",onClick:function(){return d(!0)}},(0,i.kt)("img",{src:t,alt:n,width:r})),l&&(0,i.kt)(s.Z,{mainSrc:t,onCloseRequest:function(){return d(!1)},mdxType:"Lightbox"}))},f=function(e){var t=e.date;return(0,i.kt)("div",null,(0,i.kt)("div",{className:"open"},(0,i.kt)("span",null,(0,i.kt)("svg",{height:"16",viewBox:"0 0 16 16",version:"1.1",width:"16",fill:"white","aria-hidden":"true",className:"status_svg"},(0,i.kt)("path",{fillRule:"evenodd",d:"M7.177 3.073L9.573.677A.25.25 0 0110 .854v4.792a.25.25 0 01-.427.177L7.177 3.427a.25.25 0 010-.354zM3.75 2.5a.75.75 0 100 1.5.75.75 0 000-1.5zm-2.25.75a2.25 2.25 0 113 2.122v5.256a2.251 2.251 0 11-1.5 0V5.372A2.25 2.25 0 011.5 3.25zM11 2.5h-1V4h1a1 1 0 011 1v5.628a2.251 2.251 0 101.5 0V5A2.5 2.5 0 0011 2.5zm1 10.25a.75.75 0 111.5 0 .75.75 0 01-1.5 0zM3.75 12a.75.75 0 100 1.5.75.75 0 000-1.5z"})),"Open")),t||null)},k=function(e){var t=e.url,n=o.useState(null),r=n[0],a=n[1];return o.useEffect((function(){var e=!0;return fetch(t).then((function(e){return e.json()})).then((function(t){e&&a(t.merged)})),function(){e=!1}}),[]),null===r?(0,i.kt)("div",null):!0===r?(0,i.kt)(m,{mdxType:"Merged"}):(0,i.kt)(f,{mdxType:"Open"})},g={toc:p,Merged:m,ImageWrapper:h,Open:f,Status:k};function w(e){var t=e.components,n=(0,a.Z)(e,l);return(0,i.kt)("wrapper",(0,r.Z)({},g,n,{components:t,mdxType:"MDXLayout"}))}w.isMDXComponent=!0}}]);