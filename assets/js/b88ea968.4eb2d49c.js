"use strict";(self.webpackChunkthe_open_source_with_remi=self.webpackChunkthe_open_source_with_remi||[]).push([[579,364],{3919:function(e,t,n){function r(e){return!0===/^(\w*:|\/\/)/.test(e)}function a(e){return void 0!==e&&!r(e)}n.d(t,{b:function(){return r},Z:function(){return a}})},4996:function(e,t,n){n.d(t,{C:function(){return i},Z:function(){return o}});var r=n(2263),a=n(3919);function i(){var e=(0,r.Z)().siteConfig,t=(e=void 0===e?{}:e).baseUrl,n=void 0===t?"/":t,i=e.url;return{withBaseUrl:function(e,t){return function(e,t,n,r){var i=void 0===r?{}:r,o=i.forcePrependBaseUrl,s=void 0!==o&&o,l=i.absolute,p=void 0!==l&&l;if(!n)return n;if(n.startsWith("#"))return n;if((0,a.b)(n))return n;if(s)return t+n;var c=n.startsWith(t)?n:t+n.replace(/^\//,"");return p?e+c:c}(i,n,e,t)}}}function o(e,t){return void 0===t&&(t={}),(0,i().withBaseUrl)(e,t)}},3518:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return p},contentTitle:function(){return c},metadata:function(){return u},Highlight:function(){return d},toc:function(){return m},default:function(){return b}});var r=n(3117),a=n(102),i=(n(7294),n(3905)),o=n(4996),s=n(6395),l=["components"],p={id:"octobox2597",title:"Octobox - Notifications filter",sidebar_label:"6. Octobox - Notifications filter"},c=void 0,u={unversionedId:"contributions/octobox2597",id:"contributions/octobox2597",isDocsHomePage:!1,title:"Octobox - Notifications filter",description:"backgroundColor: color,",source:"@site/docs/contributions/octobox#2597.md",sourceDirName:"contributions",slug:"/contributions/octobox2597",permalink:"/docs/contributions/octobox2597",editUrl:"https://github.com/ayshiff/my-open-source-journey/docs/contributions/octobox#2597.md",tags:[],version:"current",frontMatter:{id:"octobox2597",title:"Octobox - Notifications filter",sidebar_label:"6. Octobox - Notifications filter"},sidebar:"docs",previous:{title:"5. Backstage - Splunk On-Call Plugin",permalink:"/docs/contributions/backstage4416"},next:{title:"7. ConsoleMe - AWS IAM policy linting",permalink:"/docs/contributions/consoleme9008"}},d=function(e){var t=e.children,n=e.color;return(0,i.kt)("span",{style:{backgroundColor:n,borderRadius:"2px",color:"#fff",padding:"0.2rem",fontWeight:600}},t)},m=[{value:"Introduction",id:"introduction",children:[{value:"Project",id:"project",children:[],level:3},{value:"Context",id:"context",children:[],level:3},{value:"Current behavior",id:"current-behavior",children:[],level:3}],level:2},{value:"Setting up the project",id:"setting-up-the-project",children:[],level:2},{value:"Implement the solution",id:"implement-the-solution",children:[{value:"Add the failing tests",id:"add-the-failing-tests",children:[],level:3},{value:"Make our tests pass",id:"make-our-tests-pass",children:[],level:3},{value:"Add the new search params",id:"add-the-new-search-params",children:[],level:3},{value:"Add the scopes",id:"add-the-scopes",children:[],level:3},{value:"Add the helpers",id:"add-the-helpers",children:[{value:"Add the search filter element",id:"add-the-search-filter-element",children:[],level:4},{value:"Add the filters list helper",id:"add-the-filters-list-helper",children:[],level:4}],level:3}],level:2},{value:"Final result",id:"final-result",children:[],level:2},{value:"Takeaway",id:"takeaway",children:[{value:"Problems encountered",id:"problems-encountered",children:[],level:3},{value:"What did I learn ?",id:"what-did-i-learn-",children:[],level:3}],level:2}],h={Highlight:d,toc:m};function b(e){var t=e.components,n=(0,a.Z)(e,l);return(0,i.kt)("wrapper",(0,r.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("div",{className:"pr_infos"},(0,i.kt)("div",{className:"marginBottom"},(0,i.kt)("div",null,(0,i.kt)(s.Merged,{date:"19 Feb 2021",mdxType:"Merged"})),(0,i.kt)("span",{className:"badge badge--secondary marginRight"},"Ruby"),(0,i.kt)("span",{className:"badge badge--secondary marginRight"},"github-notifications"),(0,i.kt)("span",{className:"badge badge--secondary marginRight"},"triage"),(0,i.kt)("span",{className:"badge badge--secondary marginRight"},"inbox"))),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"Contribution link")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},(0,i.kt)("a",{parentName:"p",href:"https://github.com/octobox/octobox/pull/2597"},"https://github.com/octobox/octobox/pull/2597")))),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Contribution Type")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"This contribution is a new ",(0,i.kt)("strong",{parentName:"p"},"feature"),"."))),(0,i.kt)("h2",{id:"introduction"},"Introduction"),(0,i.kt)("div",{className:"image-wrapper"},(0,i.kt)(s.ImageWrapper,{src:(0,o.Z)("img/octobox/cover.jpg"),width:"100%",alt:"Contribution presentation",mdxType:"ImageWrapper"}),(0,i.kt)("em",null,"Octobox + Notifications filter")),(0,i.kt)("h3",{id:"project"},"Project"),(0,i.kt)("p",null,"You can find the ",(0,i.kt)("a",{href:"/docs/projects/octobox"},(0,i.kt)(d,{color:"#203666",mdxType:"Highlight"},"Octobox project presentation here")),"."),(0,i.kt)("p",null,"To access Octobox.io you just need to sign in with your GitHub profile or install the GitHub app on the ",(0,i.kt)("a",{href:"https://octobox.io/"},(0,i.kt)(d,{color:"#203666",mdxType:"Highlight"},"homepage")),"."),(0,i.kt)("h3",{id:"context"},"Context"),(0,i.kt)("h3",{id:"current-behavior"},"Current behavior"),(0,i.kt)("p",null,"In order to understand the current behavior you need to be familiar with what a GitHub notification is."),(0,i.kt)("p",null,"Notifications provide updates about the ",(0,i.kt)("strong",{parentName:"p"},"activities")," and ",(0,i.kt)("strong",{parentName:"p"},"conversations")," you're interested in.",(0,i.kt)("br",{parentName:"p"}),"\n","In the Octobox context, they can be of three different types: ",(0,i.kt)("inlineCode",{parentName:"p"},"Issue"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Pull request")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"Vulnerability alert"),".   "),(0,i.kt)("p",null,"Users can currently ",(0,i.kt)("strong",{parentName:"p"},"refine")," their notifications with ",(0,i.kt)("strong",{parentName:"p"},"specific filters"),".   "),(0,i.kt)("p",null,"Here is a list of some filters that can be used:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"repo:",(0,i.kt)("inlineCode",{parentName:"strong"},"octobox/octobox")),"\tOnly search notifications from the ",(0,i.kt)("strong",{parentName:"li"},"octobox/octobox repository"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"owner:",(0,i.kt)("inlineCode",{parentName:"strong"},"microsoft")),"\tOnly search notifications from repositories in the ",(0,i.kt)("strong",{parentName:"li"},"microsoft organisation"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"type:",(0,i.kt)("inlineCode",{parentName:"strong"},"pull_request")),"\tOnly search ",(0,i.kt)("strong",{parentName:"li"},"pull requests"),". Also accepts: issue, release, commit, repository_invitation and repository_vulnerability_alert.")),(0,i.kt)("p",null,"The goal of this contribution is to add ",(0,i.kt)("strong",{parentName:"p"},"filtering")," based on the ",(0,i.kt)("strong",{parentName:"p"},"issue number")," and/or the ",(0,i.kt)("strong",{parentName:"p"},"pull-request number")," like ",(0,i.kt)("em",{parentName:"p"},"GitHub")," does:"),(0,i.kt)("div",{className:"image-wrapper"},(0,i.kt)(s.ImageWrapper,{src:(0,o.Z)("img/octobox/issue_number.png"),width:"100%",alt:"Issue number",mdxType:"ImageWrapper"})),(0,i.kt)("br",null),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"Issue link")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},(0,i.kt)("a",{parentName:"p",href:"https://github.com/octobox/octobox/issues/2144"},"https://github.com/octobox/octobox/issues/2144")))),(0,i.kt)("h2",{id:"setting-up-the-project"},"Setting up the project"),(0,i.kt)("p",null,"In order to contribute to the project, we will need to set up certain elements."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Fork")," and ",(0,i.kt)("strong",{parentName:"p"},"clone")," the Octobox repository to our local machine."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"git clone git@github.com:<OUR_GITHUB_USERNAME>/octobox.git # Using SSH\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Install ",(0,i.kt)("strong",{parentName:"p"},"Ruby 2.7.2")," using ",(0,i.kt)("a",{href:"https://github.com/rbenv/rbenv"},(0,i.kt)(d,{color:"#203666",mdxType:"Highlight"},"rbenv"))," which is a version manager for Ruby.",(0,i.kt)("br",{parentName:"p"}),"\n","It will allow us to install the correct version of Ruby for our project."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"brew install rbenv ruby-build\nrbenv install 2.7.2\nrbenv global 2.7.2\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Install ",(0,i.kt)("strong",{parentName:"p"},"PostgreSQL")," which will be used to store our notifications."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"brew install postgres\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},'Install the "Gems" dependencies from the ',(0,i.kt)("inlineCode",{parentName:"p"},"Gemfile")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"gem install bundler && rbenv rehash\nbundle install\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Create the ",(0,i.kt)("strong",{parentName:"p"},"databases")," and ",(0,i.kt)("strong",{parentName:"p"},"tables"),' with "Rake"(it is a task runner in Ruby).'),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"bundle exec rake db:create db:migrate\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Register a new ",(0,i.kt)("a",{href:"https://github.com/settings/applications/new"},(0,i.kt)(d,{color:"#203666",mdxType:"Highlight"},"GitHub OAuth Application")),".   "),(0,i.kt)("p",{parentName:"li"},"It will allow us to connect our ",(0,i.kt)("strong",{parentName:"p"},"GitHub identity")," to our local Octobox instance using ",(0,i.kt)("strong",{parentName:"p"},"OAuth")," and to ",(0,i.kt)("strong",{parentName:"p"},"retrieve our account notifications"),"."),(0,i.kt)("div",{className:"image-wrapper"},(0,i.kt)(s.ImageWrapper,{src:(0,o.Z)("img/octobox/oauth-github.png"),width:"600",alt:"GitHub OAuth Application",mdxType:"ImageWrapper"})),(0,i.kt)("p",{parentName:"li"},"Once this step has been completed, we need to write down the ",(0,i.kt)("strong",{parentName:"p"},"client id")," and ",(0,i.kt)("strong",{parentName:"p"},"client secret")," and create an ",(0,i.kt)("inlineCode",{parentName:"p"},".env")," file with the following content:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"GITHUB_CLIENT_ID=<OUR_GITHUB_CLIENT_ID>\nGITHUB_CLIENT_SECRET=<OUR_GITHUB_CLIENT_SECRET>\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Make sure that PostgreSQL is running and ",(0,i.kt)("strong",{parentName:"p"},"start")," the project with:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"rails s\n")))),(0,i.kt)("p",null,"Now that our project is running locally, we can start ",(0,i.kt)("strong",{parentName:"p"},"implementing the solution"),"."),(0,i.kt)("h2",{id:"implement-the-solution"},"Implement the solution"),(0,i.kt)("p",null,"We will follow the TDD (",(0,i.kt)("strong",{parentName:"p"},"T"),"est ",(0,i.kt)("strong",{parentName:"p"},"D"),"riven ",(0,i.kt)("strong",{parentName:"p"},"D"),"evelopment) approach by developing test cases to specify and validate what the code will do.",(0,i.kt)("br",{parentName:"p"}),"\n","Moreover, it will allow us to do refactoring afterwards by making sure that the functional part is good."),(0,i.kt)("div",{className:"image-wrapper"},(0,i.kt)(s.ImageWrapper,{src:(0,o.Z)("img/octobox/TDD.png"),width:"600",alt:"TDD presentation",mdxType:"ImageWrapper"})),(0,i.kt)("h3",{id:"add-the-failing-tests"},"Add the failing tests"),(0,i.kt)("p",null,"To filter the notifications based on their reference numbers, we need to validate that our Search engine will correctly converts our params to the right query prefix.   "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby",metastring:'title="test/models/search_test.rb"',title:'"test/models/search_test.rb"'},"class SearchTest < ActiveSupport::TestCase\n  # ...other tests\n  test 'converts number params to number prefix without changing it' do\n    search = Search.new(query: 'inbox:true', scope: Notification.all, params: {number: '123'})\n    assert_equal search.to_query, 'inbox:true number:123'\n  end\nend\n")),(0,i.kt)("p",null,"The following tests will allow us to test that the notifications are properly filtered based on the number(s) we specified in the search input.   "),(0,i.kt)("p",null,"For example, given the following search input, the following URL will be used.   "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"/?q=inbox%3Atrue+type%3Aissue+number%3A4555\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"NOTE:")," When building a URL, we must ensure that it contains ",(0,i.kt)("strong",{parentName:"p"},"only valid characters"),".",(0,i.kt)("br",{parentName:"p"}),"\n","All characters to be URL-encoded are encoded using the ",(0,i.kt)("inlineCode",{parentName:"p"},"%")," character and two hexadecimal digits corresponding to their UTF-8 character.   "),(0,i.kt)("p",null,"This means that ",(0,i.kt)("inlineCode",{parentName:"p"},"3A")," corresponds to the character ",(0,i.kt)("inlineCode",{parentName:"p"},":")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"+")," to a space (the real encoding uses ",(0,i.kt)("inlineCode",{parentName:"p"},"%20")," but form data in URLs uses ",(0,i.kt)("inlineCode",{parentName:"p"},"+"),")."),(0,i.kt)("div",{className:"image-wrapper"},(0,i.kt)("img",{alt:"Search bar",width:"600",src:(0,o.Z)("img/octobox/search-bar.png")}),(0,i.kt)("br",null),(0,i.kt)("em",null,"Search bar component")),(0,i.kt)("br",null),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby",metastring:'title="test/controllers/notifications_controller_test.rb"',title:'"test/controllers/notifications_controller_test.rb"'},"require 'test_helper'\n\nclass NotificationsControllerTest < ActionDispatch::IntegrationTest\n  # ...other tests \n  test 'search results can filter by number' do\n    sign_in_as(@user)\n    notification1 = create(:notification, user: @user, subject_type: 'Issue')\n    notification2 = create(:notification, user: @user, subject_type: 'PullRequest')\n    subject1 = create(:subject, notifications: [notification1])\n    subject2 = create(:subject, notifications: [notification2])\n    get '/?q=number%3A' + subject1.url.scan(/\\d+$/).first\n    assert_equal assigns(:notifications).length, 1\n    assert_equal assigns(:notifications).first.subject_url, subject1.url\n  end\n\n  test 'search results can filter by multiple numbers' do\n    sign_in_as(@user)\n    notification1 = create(:notification, user: @user, subject_type: 'Issue')\n    notification2 = create(:notification, user: @user, subject_type: 'PullRequest')\n    subject1 = create(:subject, notifications: [notification1])\n    subject2 = create(:subject, notifications: [notification2])\n    get '/?q=number%3A' + subject1.url.scan(/\\d+$/).first + '%2C' + subject2.url.scan(/\\d+$/).first\n    assert_equal assigns(:notifications).length, 2\n  end\nend\n")),(0,i.kt)("h3",{id:"make-our-tests-pass"},"Make our tests pass"),(0,i.kt)("p",null,"In order to make our tests pass, we will need to implement different things:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Add a new param ",(0,i.kt)("inlineCode",{parentName:"li"},"number")," for the search model which will be used to query the right filters."),(0,i.kt)("li",{parentName:"ul"},"Add a new ",(0,i.kt)("inlineCode",{parentName:"li"},"number")," scope which will be used to select the notifications from our table with a number which ",(0,i.kt)("strong",{parentName:"li"},"matches")," to our."),(0,i.kt)("li",{parentName:"ul"},"Add a new ",(0,i.kt)("inlineCode",{parentName:"li"},"-number")," scope which will be used to select the notifications from our table with a number which is ",(0,i.kt)("strong",{parentName:"li"},"different")," to our.")),(0,i.kt)("h3",{id:"add-the-new-search-params"},"Add the new search params"),(0,i.kt)("p",null,"This step involves adding our two new params ",(0,i.kt)("inlineCode",{parentName:"p"},"number")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"-number"),".",(0,i.kt)("br",{parentName:"p"}),"\n","It will allow us to pass the right information to the scopes who will take care of the logic to retrieve the corresponding notifications in our database.   "),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"exclude_number")," works as a negative filter and will therefore filter in the opposite way to ",(0,i.kt)("inlineCode",{parentName:"p"},"number"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"-number"),"."),(0,i.kt)("p",null,"We will update our ",(0,i.kt)("inlineCode",{parentName:"p"},"Search")," ",(0,i.kt)("strong",{parentName:"p"},"model")," to add our new params."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby",metastring:'{14-15,19-21,23-25,29-32} title="app/models/search.rb"',"{14-15,19-21,23-25,29-32}":!0,title:'"app/models/search.rb"'},"class Search\n  attr_accessor :parsed_query\n  attr_accessor :scope\n\n  def initialize(query: '', scope:, params: {})\n    @parsed_query = SearchParser.new(query)\n    @scope = scope\n    convert(params)\n  end\n\n  def results\n    res = scope\n    # This is used to get our parsed_query :number\n    res = res.number(number) if number.present?\n    res = res.exclude_number(exclude_number) if exclude_number.present?\n    # ... other params\n  end\n\n  def number\n    parsed_query[:number]\n  end\n\n  def exclude_number\n    parsed_query[:'-number']\n  end\n\n  def convert(params)\n    # ... other params\n    [:repo, :owner, :author, :number].each do |filter|\n      next if params[filter].blank?\n      @parsed_query[filter] = Array(params[filter])\n    end\n  end\nend\n")),(0,i.kt)("p",null,"We will also need to add our new filter to the filter list inside the notifications helper.   "),(0,i.kt)("p",null,"In particular, it will be useful for displaying the filter in the list of selected filters thanks to the ",(0,i.kt)("inlineCode",{parentName:"p"},"filter_option")," helper. (see the ",(0,i.kt)("a",{href:"/docs/contributions/octobox2597#add-the-search-filter-element"},(0,i.kt)(d,{color:"#203666",mdxType:"Highlight"},"search filter element"))," section)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby",metastring:'{7} title="app/helpers/notifications_helper.rb"',"{7}":!0,title:'"app/helpers/notifications_helper.rb"'},"module NotificationsHelper\n  def filters\n    {\n      reason:          params[:reason],\n      unread:          params[:unread],\n      repo:            params[:repo],\n      number:          params[:number],\n      # ... other filters\n    }\n  end\n\n  def filter_option(param)\n    if filters[param].present?\n      link_to root_path(filters.except(param)), class: \"btn btn-sm btn-outline-dark\" do\n        concat octicon('x', :height => 16)\n        concat ' '\n        concat yield\n      end\n    end\n  end\n\n  # ... other helpers\n")),(0,i.kt)("h3",{id:"add-the-scopes"},"Add the scopes"),(0,i.kt)("p",null,"Now that we have the filters requested by the user, all we have to do is retrieve the corresponding elements."),(0,i.kt)("p",null,"There is one property of the ",(0,i.kt)("inlineCode",{parentName:"p"},"notification")," element that we will use: ",(0,i.kt)("inlineCode",{parentName:"p"},"subject_url"),"."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"subject_url")," property is in the following format:"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"https://github.com/octobox/octobox/issues")," ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"/2520"))," (with the reference number at the end of the url)."),(0,i.kt)("p",null,"Note that if the ",(0,i.kt)("inlineCode",{parentName:"p"},"number")," filter is combined with the ",(0,i.kt)("inlineCode",{parentName:"p"},"type")," filter, it will only search notifications of this type."),(0,i.kt)("div",{className:"image-wrapper"},(0,i.kt)(s.ImageWrapper,{src:(0,o.Z)("img/octobox/filtering-schema.png"),width:"100%",alt:"Filtering schema",mdxType:"ImageWrapper"}),(0,i.kt)("em",null,"Notifications filtering")),(0,i.kt)("br",null),(0,i.kt)("p",null,"In the ",(0,i.kt)("strong",{parentName:"p"},"inclusive case")," we need to retrieve the notifications that ",(0,i.kt)("strong",{parentName:"p"},"have")," a reference number that corresponds to the one we provide."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby",metastring:'title="lib/octobox/notifications/inclusive_scope.rb"',title:'"lib/octobox/notifications/inclusive_scope.rb"'},'scope :number, ->(subject_numbers)  {\n  joins(:subject).where(\n    subject_numbers.map { |subject_number| \n      arel_table[:subject_url].matches("%/#{subject_number}") \n    }.reduce(:or)\n  )\n}\n')),(0,i.kt)("p",null,"In the ",(0,i.kt)("strong",{parentName:"p"},"exclusive case")," we need to retrieve the notifications that ",(0,i.kt)("strong",{parentName:"p"},"have not")," a reference number that corresponds to the one we provide."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby",metastring:'title="lib/octobox/notifications/exclusive_scope.rb"',title:'"lib/octobox/notifications/exclusive_scope.rb"'},'scope :exclude_number, ->(subject_numbers)  {\n  joins(:subject).where.not(\n    subject_numbers.map { |subject_number| \n      arel_table[:subject_url].matches("%/#{subject_number}") \n    }.reduce(:or)\n  )\n}\n')),(0,i.kt)("h3",{id:"add-the-helpers"},"Add the helpers"),(0,i.kt)("p",null,"Now that we have developed our new filtering system, all we have to do is add various helpers that will allow the user to use our filters correctly."),(0,i.kt)("h4",{id:"add-the-search-filter-element"},"Add the search filter element"),(0,i.kt)("p",null,"In order to help the user visualize the filters that are currently selected, we will add a new element to the ",(0,i.kt)("inlineCode",{parentName:"p"},"_filter-list")," view."),(0,i.kt)("div",{className:"image-wrapper"},(0,i.kt)("img",{alt:"Search filter element",width:"600",src:(0,o.Z)("img/octobox/search-filter-list.png")}),(0,i.kt)("br",null),(0,i.kt)("em",null,"Search filter component")),(0,i.kt)("br",null),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-auto",metastring:'title="app/views/notifications/_filter-list.html.erb"',title:'"app/views/notifications/_filter-list.html.erb"'},"<%= filter_option :number do %>\n  Number: <%= params[:number] %>\n<% end %>\n")),(0,i.kt)("h4",{id:"add-the-filters-list-helper"},"Add the filters list helper"),(0,i.kt)("p",null,"To help the user use the correct filters, a modal-component is available.",(0,i.kt)("br",{parentName:"p"}),"\n","It display some information to the user about the different filters he can use."),(0,i.kt)("div",{className:"image-wrapper"},(0,i.kt)(s.ImageWrapper,{src:(0,o.Z)("img/octobox/filter-list-doc.png"),width:"600",alt:"Filter list helper",mdxType:"ImageWrapper"}),(0,i.kt)("em",null,"Filter list helper")),(0,i.kt)("br",null),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html",metastring:'title="app/views/shared/_search_prefixes.html.erb"',title:'"app/views/shared/_search_prefixes.html.erb"'},"<tr>\n  <td>\n    <code>number:123</code>\n  </td>\n  <td>Filter by notifications from issues and/or pull requests with the number '123'.</td>\n</tr>\n")),(0,i.kt)("h2",{id:"final-result"},"Final result"),(0,i.kt)("p",null,"Here is the final result with a sample workflow:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Filtering by ",(0,i.kt)("strong",{parentName:"li"},"only one")," reference number"),(0,i.kt)("li",{parentName:"ul"},"Filtering by ",(0,i.kt)("strong",{parentName:"li"},"multiple")," reference numbers"),(0,i.kt)("li",{parentName:"ul"},"Filtering with a ",(0,i.kt)("strong",{parentName:"li"},"negated")," reference number")),(0,i.kt)("div",{className:"image-wrapper"},(0,i.kt)(s.ImageWrapper,{src:(0,o.Z)("img/octobox/final_result.gif"),width:"100%",alt:"Final result",mdxType:"ImageWrapper"})),(0,i.kt)("h2",{id:"takeaway"},"Takeaway"),(0,i.kt)("h3",{id:"problems-encountered"},"Problems encountered"),(0,i.kt)("p",null,"I did not have any major problems with this contribution.   "),(0,i.kt)("p",null,"The local setup of the project was a bit long (configuration of the GitHub OAuth Application, setting up postgres/redis...) especially for the configuration of the ruby version where I had incompatibilities between the ",(0,i.kt)("inlineCode",{parentName:"p"},"rbenv")," version and my local ruby version using ",(0,i.kt)("inlineCode",{parentName:"p"},"rvm"),".  "),(0,i.kt)("p",null,"But it gave me a better idea of how the project worked."),(0,i.kt)("h3",{id:"what-did-i-learn-"},"What did I learn ?"),(0,i.kt)("p",null,"This contribution allowed me to learn more about ",(0,i.kt)("strong",{parentName:"p"},"Ruby On-Rails")," and its usage in a concrete project.",(0,i.kt)("br",{parentName:"p"}),"\n","Ruby is not a language I usually use, it allowed me to use a different language from the ones I usually use."))}b.isMDXComponent=!0},6395:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return p},contentTitle:function(){return c},metadata:function(){return u},toc:function(){return d},Merged:function(){return m},ImageWrapper:function(){return h},Open:function(){return b},Status:function(){return k},default:function(){return f}});var r=n(3117),a=n(102),i=n(7294),o=n(3905),s=n(2879),l=["components"],p={},c=void 0,u={unversionedId:"utils",id:"utils",isDocsHomePage:!1,title:"utils",description:"<svg",source:"@site/docs/utils.md",sourceDirName:".",slug:"/utils",permalink:"/docs/utils",editUrl:"https://github.com/ayshiff/my-open-source-journey/docs/utils.md",tags:[],version:"current",frontMatter:{}},d=[],m=function(e){var t=e.date;return(0,o.kt)("div",null,(0,o.kt)("div",{className:"merged"},(0,o.kt)("span",null,(0,o.kt)("svg",{height:"16",viewBox:"0 0 16 16",version:"1.1",width:"16",fill:"white","aria-hidden":"true",className:"status_svg"},(0,o.kt)("path",{fillRule:"evenodd",d:"M5 3.254V3.25v.005a.75.75 0 110-.005v.004zm.45 1.9a2.25 2.25 0 10-1.95.218v5.256a2.25 2.25 0 101.5 0V7.123A5.735 5.735 0 009.25 9h1.378a2.251 2.251 0 100-1.5H9.25a4.25 4.25 0 01-3.8-2.346zM12.75 9a.75.75 0 100-1.5.75.75 0 000 1.5zm-8.5 4.5a.75.75 0 100-1.5.75.75 0 000 1.5z"})),"Merged")),t||null)},h=function(e){var t=e.src,n=e.alt,r=e.width,a=i.useState(!1),l=a[0],p=a[1];return(0,o.kt)("div",null,(0,o.kt)("div",{className:"image-zoom",onClick:function(){return p(!0)}},(0,o.kt)("img",{src:t,alt:n,width:r})),l&&(0,o.kt)(s.Z,{mainSrc:t,onCloseRequest:function(){return p(!1)},mdxType:"Lightbox"}))},b=function(e){var t=e.date;return(0,o.kt)("div",null,(0,o.kt)("div",{className:"open"},(0,o.kt)("span",null,(0,o.kt)("svg",{height:"16",viewBox:"0 0 16 16",version:"1.1",width:"16",fill:"white","aria-hidden":"true",className:"status_svg"},(0,o.kt)("path",{fillRule:"evenodd",d:"M7.177 3.073L9.573.677A.25.25 0 0110 .854v4.792a.25.25 0 01-.427.177L7.177 3.427a.25.25 0 010-.354zM3.75 2.5a.75.75 0 100 1.5.75.75 0 000-1.5zm-2.25.75a2.25 2.25 0 113 2.122v5.256a2.251 2.251 0 11-1.5 0V5.372A2.25 2.25 0 011.5 3.25zM11 2.5h-1V4h1a1 1 0 011 1v5.628a2.251 2.251 0 101.5 0V5A2.5 2.5 0 0011 2.5zm1 10.25a.75.75 0 111.5 0 .75.75 0 01-1.5 0zM3.75 12a.75.75 0 100 1.5.75.75 0 000-1.5z"})),"Open")),t||null)},k=function(e){var t=e.url,n=i.useState(null),r=n[0],a=n[1];return i.useEffect((function(){var e=!0;return fetch(t).then((function(e){return e.json()})).then((function(t){e&&a(t.merged)})),function(){e=!1}}),[]),null===r?(0,o.kt)("div",null):!0===r?(0,o.kt)(m,{mdxType:"Merged"}):(0,o.kt)(b,{mdxType:"Open"})},g={toc:d,Merged:m,ImageWrapper:h,Open:b,Status:k};function f(e){var t=e.components,n=(0,a.Z)(e,l);return(0,o.kt)("wrapper",(0,r.Z)({},g,n,{components:t,mdxType:"MDXLayout"}))}f.isMDXComponent=!0}}]);