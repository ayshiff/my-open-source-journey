"use strict";(self.webpackChunkthe_open_source_with_remi=self.webpackChunkthe_open_source_with_remi||[]).push([[623,364],{3919:function(e,t,n){function a(e){return!0===/^(\w*:|\/\/)/.test(e)}function i(e){return void 0!==e&&!a(e)}n.d(t,{b:function(){return a},Z:function(){return i}})},4996:function(e,t,n){n.d(t,{C:function(){return r},Z:function(){return l}});var a=n(2263),i=n(3919);function r(){var e=(0,a.Z)().siteConfig,t=(e=void 0===e?{}:e).baseUrl,n=void 0===t?"/":t,r=e.url;return{withBaseUrl:function(e,t){return function(e,t,n,a){var r=void 0===a?{}:a,l=r.forcePrependBaseUrl,o=void 0!==l&&l,s=r.absolute,m=void 0!==s&&s;if(!n)return n;if(n.startsWith("#"))return n;if((0,i.b)(n))return n;if(o)return t+n;var p=n.startsWith(t)?n:t+n.replace(/^\//,"");return m?e+p:p}(r,n,e,t)}}}function l(e,t){return void 0===t&&(t={}),(0,r().withBaseUrl)(e,t)}},7205:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return m},contentTitle:function(){return p},metadata:function(){return c},Highlight:function(){return u},toc:function(){return d},default:function(){return g}});var a=n(3117),i=n(102),r=(n(7294),n(3905)),l=n(4996),o=n(6395),s=["components"],m={id:"caramel91",title:"Caramel - Pipe operator support",sidebar_label:"9. Caramel - Pipe operator support"},p=void 0,c={unversionedId:"contributions/caramel91",id:"contributions/caramel91",isDocsHomePage:!1,title:"Caramel - Pipe operator support",description:"backgroundColor: color,",source:"@site/docs/contributions/caramel#91.md",sourceDirName:"contributions",slug:"/contributions/caramel91",permalink:"/docs/contributions/caramel91",editUrl:"https://github.com/ayshiff/my-open-source-journey/docs/contributions/caramel#91.md",tags:[],version:"current",frontMatter:{id:"caramel91",title:"Caramel - Pipe operator support",sidebar_label:"9. Caramel - Pipe operator support"},sidebar:"docs",previous:{title:"8. Changesets - Comment on released PRs and issues",permalink:"/docs/contributions/changesets80"},next:{title:"10. Firefox for iOS - Bug fixing",permalink:"/docs/contributions/firefox-ios8327"}},u=function(e){var t=e.children,n=e.color;return(0,r.kt)("span",{style:{backgroundColor:n,borderRadius:"2px",color:"#fff",padding:"0.2rem",fontWeight:600}},t)},d=[{value:"Introduction",id:"introduction",children:[{value:"Project",id:"project",children:[],level:3},{value:"Context",id:"context",children:[],level:3},{value:"Current behavior",id:"current-behavior",children:[],level:3}],level:2},{value:"Implement the solution",id:"implement-the-solution",children:[{value:"Caramel runtime",id:"caramel-runtime",children:[],level:3},{value:"Static single assignment",id:"static-single-assignment",children:[],level:3}],level:2},{value:"Final result",id:"final-result",children:[],level:2},{value:"Takeaway",id:"takeaway",children:[{value:"Problems encountered",id:"problems-encountered",children:[],level:3},{value:"What did I learn ?",id:"what-did-i-learn-",children:[],level:3}],level:2}],h={Highlight:u,toc:d};function g(e){var t=e.components,n=(0,i.Z)(e,s);return(0,r.kt)("wrapper",(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("div",{className:"pr_infos"},(0,r.kt)("div",{className:"marginBottom"},(0,r.kt)("div",null,(0,r.kt)(o.Open,{date:"29 Mar 2021",mdxType:"Open"})),(0,r.kt)("span",{className:"badge badge--secondary marginRight"},"Erlang"),(0,r.kt)("span",{className:"badge badge--secondary marginRight"},"Elixir"),(0,r.kt)("span",{className:"badge badge--secondary marginRight"},"Compiler"),(0,r.kt)("span",{className:"badge badge--secondary marginRight"},"Ocaml"),(0,r.kt)("span",{className:"badge badge--secondary marginRight"},"functional-language"))),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"Contribution link")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},(0,r.kt)("a",{parentName:"p",href:"https://github.com/AbstractMachinesLab/caramel/pull/91"},"https://github.com/AbstractMachinesLab/caramel/pull/91")))),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Contribution Type")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"This contribution is a new ",(0,r.kt)("strong",{parentName:"p"},"feature"),"."))),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("div",{className:"image-wrapper"},(0,r.kt)(o.ImageWrapper,{src:(0,l.Z)("img/caramel/cover.jpg"),width:"100%",alt:"Contribution presentation",mdxType:"ImageWrapper"}),(0,r.kt)("em",null,"Caramel pipe operator")),(0,r.kt)("h3",{id:"project"},"Project"),(0,r.kt)("p",null,"You can find the ",(0,r.kt)("strong",{parentName:"p"},"Caramel programming language presentation")," ",(0,r.kt)("a",{href:"/docs/projects/caramel"},(0,r.kt)(u,{color:"#203666",mdxType:"Highlight"},"here")),"."),(0,r.kt)("h3",{id:"context"},"Context"),(0,r.kt)("p",null,"This contribution adds pipe operator ",(0,r.kt)("inlineCode",{parentName:"p"},"|>")," support to the Caramel language.    "),(0,r.kt)("p",null,"Here is a summary of the different steps in a compiler:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Lexing")," the source into tokens"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Parsing")," the token stream into an AST (abstract syntax tree)"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Validating")," the AST"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Translating")," the AST")),(0,r.kt)("h3",{id:"current-behavior"},"Current behavior"),(0,r.kt)("p",null,'In many functional programming languages, it is a common way to compose functions into a readable left-to-right "pipeline" of steps of computation.'),(0,r.kt)("p",null,"For example in ",(0,r.kt)("a",{href:"https://ocaml.org/releases/4.11/htmlman/libref/Stdlib.html#VAL(%7C%3E)"},(0,r.kt)(u,{color:"#203666",mdxType:"Highlight"},"OCaml")),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ocaml"},"val (|>) : 'a -> ('a -> 'b) -> 'b\n")),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"Issue link")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},(0,r.kt)("a",{parentName:"p",href:"https://github.com/AbstractMachinesLab/caramel/issues/72"},"https://github.com/AbstractMachinesLab/caramel/issues/72")))),(0,r.kt)("h2",{id:"implement-the-solution"},"Implement the solution"),(0,r.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"code blocks")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"The code blocks are intentionally incomplete for the sake of readability.",(0,r.kt)("br",{parentName:"p"}),"\n","If you want to read the full code you'll find it in the PR link at the top."))),(0,r.kt)("div",{className:"admonition admonition-warning alert alert--danger"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"changes")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"This PR being still Open, some parts are likely to change.",(0,r.kt)("br",{parentName:"p"}),"\n","I will keep the article updated if any changes are made."))),(0,r.kt)("h3",{id:"caramel-runtime"},"Caramel runtime"),(0,r.kt)("p",null,"The first idea was to expose the pipe operator as an external that maps to a ",(0,r.kt)("inlineCode",{parentName:"p"},"caramel_runtime:pipe")," function."),(0,r.kt)("p",null,"Here is the pipe operator signature:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ocaml",metastring:'title="caramel/stdlib/caramel_runtime.ml"',title:'"caramel/stdlib/caramel_runtime.ml"'},"external ( |> ) : 'a -> ('a -> 'b) -> 'b = \"pipe\"\n")),(0,r.kt)("p",null,"Here is the pipe operator definition:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ocaml",metastring:'title="caramel/stdlib/caramel_runtime.erl"',title:'"caramel/stdlib/caramel_runtime.erl"'},"pipe(A, B) -> B(A).\n")),(0,r.kt)("p",null,"We will tell the compiler to map ",(0,r.kt)("inlineCode",{parentName:"p"},"|>")," to our caramel_runtime pipe function:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ocaml",metastring:'title="caramel/compiler/ocaml_to_erlang/names.ml"',title:'"caramel/compiler/ocaml_to_erlang/names.ml"'},'let ocaml_to_erlang_primitive_op t =\n  match t with\n  (* ... *)\n  | "|>" ->\n      Name.qualified\n        ~m:(Name.atom (Atom.mk "caramel_runtime"))\n        ~f:(Name.atom (Atom.mk "pipe"))\n')),(0,r.kt)("p",null,"Finally given this input:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ocaml"},'let print_int number = Io.format "~0tp~n" [ number ]\n\nlet subtract x y = y - x\nlet main _ =\n  let divide x y = y / x in\n  10 |> subtract 2 |> divide 4 |> print_int\n')),(0,r.kt)("p",null,"It will output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-erlang"},"-module(pipe).\n\n-export([main/1]).\n-export([print_int/1]).\n-export([subtract/2]).\n\n-spec print_int(_) -> ok.\nprint_int(Number) -> io:format(<<\"~0tp~n\">>, [Number | []]).\n\n-spec subtract(integer(), integer()) -> integer().\nsubtract(X, Y) -> erlang:'-'(Y, X).\n\n-spec main(_) -> ok.\nmain(_) ->\n  Divide = fun\n    (X, Y) -> erlang:'div'(Y, X)\n  end,\n  caramel_runtime:pipe(\n    caramel_runtime:pipe(\n      caramel_runtime:pipe(\n        10, subtract(2)\n      ),\n    Divide(4)\n  ),\nfun print_int/1).\n")),(0,r.kt)("p",null,"Look how the compiler has replaced our pipes."),(0,r.kt)("p",null,"The problem was that we needed to first implement partial application to make it work.",(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("strong",{parentName:"p"},"Partial application")," involves passing less than the full number of arguments to a function."),(0,r.kt)("p",null,"For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ocaml"},"let add a b = a + b\nlet addOne = add 1\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"addOne")," is the result of partially applying ",(0,r.kt)("inlineCode",{parentName:"p"},"add"),".",(0,r.kt)("br",{parentName:"p"}),"\n","It is a function that takes an integer ",(0,r.kt)("inlineCode",{parentName:"p"},"b")," and return ",(0,r.kt)("inlineCode",{parentName:"p"},"b")," + 1."),(0,r.kt)("p",null,"In our example, ",(0,r.kt)("inlineCode",{parentName:"p"},"subtract")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Divide")," arr called with less arguments that they have to take."),(0,r.kt)("p",null,"So we went for another solution: rewrite the pipes into SSA (static single assignment)."),(0,r.kt)("h3",{id:"static-single-assignment"},"Static single assignment"),(0,r.kt)("p",null,"The translation phase is broken down into 3 phases:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The AST is lowered into an ",(0,r.kt)("strong",{parentName:"li"},"IR")," (intermediate representation)"),(0,r.kt)("li",{parentName:"ul"},"The IR is ",(0,r.kt)("strong",{parentName:"li"},"analyzed")),(0,r.kt)("li",{parentName:"ul"},"The IR is ",(0,r.kt)("strong",{parentName:"li"},"translated"))),(0,r.kt)("p",null,"SSA introduces a new constraint: all variables are assigned exactly ",(0,r.kt)("strong",{parentName:"p"},"once"),"."),(0,r.kt)("p",null,"The idea is to go from this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ocaml"},"let f x = x |> add 1 |> div 2 |> mult 3\n")),(0,r.kt)("p",null,"To something like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ocaml"},"f(X) ->\n  Caramel@Tmp1 = add(1, X),\n  Caramel@Tmp2 = div(2, Caramel@Tmp1),\n  Caramel@Tmp3 = mult(3, Caramel@Tmp2).\n")),(0,r.kt)("p",null,"For now we will implement this logic in the ocaml translation side."),(0,r.kt)("p",null,"The goal is to go from ",(0,r.kt)("inlineCode",{parentName:"p"},"a |> f |> g")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"let a_f = f a in let a_f_g = g a_f"),"."),(0,r.kt)("p",null,"Inside ",(0,r.kt)("inlineCode",{parentName:"p"},"caramel/compiler/ocaml_to_erlang/fun.ml")," there is a match clause for the function application.",(0,r.kt)("br",{parentName:"p"}),"\n","We will add a special case for the pipe operator."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ocaml"},"| Texp_apply (expr, args) ->\n    let name =\n      match\n        mk_expression expr ~var_names ~modules ~functions ~module_name\n      with\n      | Erlang.Ast.Expr_fun_ref { fref_name = n; _ } -> Expr.ident n\n      | x -> x\n    in\n    let args =\n      List.filter_map\n        (function\n          | _, None -> None\n          | _, Some arg ->\n              Some\n                (mk_expression arg ~var_names ~modules ~functions ~module_name))\n        args\n    in\n    Expr.apply name args\n")),(0,r.kt)("p",null,"The idea is to check if the ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," variable is the pipe function and then do our logic to bind the result of ",(0,r.kt)("inlineCode",{parentName:"p"},"f x")," to a new variable with a unique name."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ocaml"},'if name = "<PIPE_OPERATOR>"\nthen (\n  let f = args[0] in\n  let x = args[1] in\n  let f_x = Expr.apply f x in\n  let new_var = "<NEW_VARIABLE_NAME>" in\n  let binding = Expr.bind new_var f_x in\n  Expr.var binding "<NEW_VARIABLE_NAME>"\n)\nelse (\n  Expr.apply name args\n)\n')),(0,r.kt)("h2",{id:"final-result"},"Final result"),(0,r.kt)("p",null,"The final result allows us to compose our function pipeline in this way:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ocaml"},'"function1_arg_1"\n  |> function1 "function1_arg_2" \n  |> function2 "function2_arg_1" \n  |> function3\n')),(0,r.kt)("h2",{id:"takeaway"},"Takeaway"),(0,r.kt)("h3",{id:"problems-encountered"},"Problems encountered"),(0,r.kt)("p",null,"Understanding how the compiler works was the step that took me the most time.",(0,r.kt)("br",{parentName:"p"}),"\n","It required me to understand a codebase I'm not used to deal with."),(0,r.kt)("h3",{id:"what-did-i-learn-"},"What did I learn ?"),(0,r.kt)("p",null,"This contribution allowed me to review some concepts about ",(0,r.kt)("strong",{parentName:"p"},"compilers")," and ",(0,r.kt)("strong",{parentName:"p"},"functional")," programming languages."))}g.isMDXComponent=!0},6395:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return m},contentTitle:function(){return p},metadata:function(){return c},toc:function(){return u},Merged:function(){return d},ImageWrapper:function(){return h},Open:function(){return g},Status:function(){return k},default:function(){return f}});var a=n(3117),i=n(102),r=n(7294),l=n(3905),o=n(2879),s=["components"],m={},p=void 0,c={unversionedId:"utils",id:"utils",isDocsHomePage:!1,title:"utils",description:"<svg",source:"@site/docs/utils.md",sourceDirName:".",slug:"/utils",permalink:"/docs/utils",editUrl:"https://github.com/ayshiff/my-open-source-journey/docs/utils.md",tags:[],version:"current",frontMatter:{}},u=[],d=function(e){var t=e.date;return(0,l.kt)("div",null,(0,l.kt)("div",{className:"merged"},(0,l.kt)("span",null,(0,l.kt)("svg",{height:"16",viewBox:"0 0 16 16",version:"1.1",width:"16",fill:"white","aria-hidden":"true",className:"status_svg"},(0,l.kt)("path",{fillRule:"evenodd",d:"M5 3.254V3.25v.005a.75.75 0 110-.005v.004zm.45 1.9a2.25 2.25 0 10-1.95.218v5.256a2.25 2.25 0 101.5 0V7.123A5.735 5.735 0 009.25 9h1.378a2.251 2.251 0 100-1.5H9.25a4.25 4.25 0 01-3.8-2.346zM12.75 9a.75.75 0 100-1.5.75.75 0 000 1.5zm-8.5 4.5a.75.75 0 100-1.5.75.75 0 000 1.5z"})),"Merged")),t||null)},h=function(e){var t=e.src,n=e.alt,a=e.width,i=r.useState(!1),s=i[0],m=i[1];return(0,l.kt)("div",null,(0,l.kt)("div",{className:"image-zoom",onClick:function(){return m(!0)}},(0,l.kt)("img",{src:t,alt:n,width:a})),s&&(0,l.kt)(o.Z,{mainSrc:t,onCloseRequest:function(){return m(!1)},mdxType:"Lightbox"}))},g=function(e){var t=e.date;return(0,l.kt)("div",null,(0,l.kt)("div",{className:"open"},(0,l.kt)("span",null,(0,l.kt)("svg",{height:"16",viewBox:"0 0 16 16",version:"1.1",width:"16",fill:"white","aria-hidden":"true",className:"status_svg"},(0,l.kt)("path",{fillRule:"evenodd",d:"M7.177 3.073L9.573.677A.25.25 0 0110 .854v4.792a.25.25 0 01-.427.177L7.177 3.427a.25.25 0 010-.354zM3.75 2.5a.75.75 0 100 1.5.75.75 0 000-1.5zm-2.25.75a2.25 2.25 0 113 2.122v5.256a2.251 2.251 0 11-1.5 0V5.372A2.25 2.25 0 011.5 3.25zM11 2.5h-1V4h1a1 1 0 011 1v5.628a2.251 2.251 0 101.5 0V5A2.5 2.5 0 0011 2.5zm1 10.25a.75.75 0 111.5 0 .75.75 0 01-1.5 0zM3.75 12a.75.75 0 100 1.5.75.75 0 000-1.5z"})),"Open")),t||null)},k=function(e){var t=e.url,n=r.useState(null),a=n[0],i=n[1];return r.useEffect((function(){var e=!0;return fetch(t).then((function(e){return e.json()})).then((function(t){e&&i(t.merged)})),function(){e=!1}}),[]),null===a?(0,l.kt)("div",null):!0===a?(0,l.kt)(d,{mdxType:"Merged"}):(0,l.kt)(g,{mdxType:"Open"})},v={toc:u,Merged:d,ImageWrapper:h,Open:g,Status:k};function f(e){var t=e.components,n=(0,i.Z)(e,s);return(0,l.kt)("wrapper",(0,a.Z)({},v,n,{components:t,mdxType:"MDXLayout"}))}f.isMDXComponent=!0}}]);